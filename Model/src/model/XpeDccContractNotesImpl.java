package model;

import java.sql.Timestamp;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.domain.ClobDomain;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Feb 01 02:58:46 EST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XpeDccContractNotesImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        XpeContractId,
        XpeContractVersion,
        XpeNoteDttm,
        XpeNote,
        XpeUser,
        XpeNoteLong,
        XpeNoteType,
        CreatedBy,
        LastUpdatedBy,
        CreatedDate,
        LastUpdatedDate,
        XpeDccContractVersion;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int XPECONTRACTID = AttributesEnum.XpeContractId.index();
    public static final int XPECONTRACTVERSION = AttributesEnum.XpeContractVersion.index();
    public static final int XPENOTEDTTM = AttributesEnum.XpeNoteDttm.index();
    public static final int XPENOTE = AttributesEnum.XpeNote.index();
    public static final int XPEUSER = AttributesEnum.XpeUser.index();
    public static final int XPENOTELONG = AttributesEnum.XpeNoteLong.index();
    public static final int XPENOTETYPE = AttributesEnum.XpeNoteType.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int LASTUPDATEDDATE = AttributesEnum.LastUpdatedDate.index();
    public static final int XPEDCCCONTRACTVERSION = AttributesEnum.XpeDccContractVersion.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XpeDccContractNotesImpl() {
    }

    /**
     * Gets the attribute value for XpeContractId, using the alias name XpeContractId.
     * @return the value of XpeContractId
     */
    public String getXpeContractId() {
        return (String) getAttributeInternal(XPECONTRACTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for XpeContractId.
     * @param value value to set the XpeContractId
     */
    public void setXpeContractId(String value) {
        setAttributeInternal(XPECONTRACTID, value);
    }

    /**
     * Gets the attribute value for XpeContractVersion, using the alias name XpeContractVersion.
     * @return the value of XpeContractVersion
     */
    public String getXpeContractVersion() {
        return (String) getAttributeInternal(XPECONTRACTVERSION);
    }

    /**
     * Sets <code>value</code> as the attribute value for XpeContractVersion.
     * @param value value to set the XpeContractVersion
     */
    public void setXpeContractVersion(String value) {
        setAttributeInternal(XPECONTRACTVERSION, value);
    }

    /**
     * Gets the attribute value for XpeNoteDttm, using the alias name XpeNoteDttm.
     * @return the value of XpeNoteDttm
     */
    public Timestamp getXpeNoteDttm() {
        return (Timestamp) getAttributeInternal(XPENOTEDTTM);
    }

    /**
     * Sets <code>value</code> as the attribute value for XpeNoteDttm.
     * @param value value to set the XpeNoteDttm
     */
    public void setXpeNoteDttm(Timestamp value) {
        setAttributeInternal(XPENOTEDTTM, value);
    }

    /**
     * Gets the attribute value for XpeNote, using the alias name XpeNote.
     * @return the value of XpeNote
     */
    public String getXpeNote() {
        return (String) getAttributeInternal(XPENOTE);
    }

    /**
     * Sets <code>value</code> as the attribute value for XpeNote.
     * @param value value to set the XpeNote
     */
    public void setXpeNote(String value) {
        setAttributeInternal(XPENOTE, value);
    }

    /**
     * Gets the attribute value for XpeUser, using the alias name XpeUser.
     * @return the value of XpeUser
     */
    public String getXpeUser() {
        return (String) getAttributeInternal(XPEUSER);
    }

    /**
     * Sets <code>value</code> as the attribute value for XpeUser.
     * @param value value to set the XpeUser
     */
    public void setXpeUser(String value) {
        setAttributeInternal(XPEUSER, value);
    }

    /**
     * Gets the attribute value for XpeNoteLong, using the alias name XpeNoteLong.
     * @return the value of XpeNoteLong
     */
    public ClobDomain getXpeNoteLong() {
        return (ClobDomain) getAttributeInternal(XPENOTELONG);
    }

    /**
     * Sets <code>value</code> as the attribute value for XpeNoteLong.
     * @param value value to set the XpeNoteLong
     */
    public void setXpeNoteLong(ClobDomain value) {
        setAttributeInternal(XPENOTELONG, value);
    }

    /**
     * Gets the attribute value for XpeNoteType, using the alias name XpeNoteType.
     * @return the value of XpeNoteType
     */
    public String getXpeNoteType() {
        return (String) getAttributeInternal(XPENOTETYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for XpeNoteType.
     * @param value value to set the XpeNoteType
     */
    public void setXpeNoteType(String value) {
        setAttributeInternal(XPENOTETYPE, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public String getCreatedBy() {
        return (String) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the value of LastUpdatedBy
     */
    public String getLastUpdatedBy() {
        return (String) getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedBy.
     * @param value value to set the LastUpdatedBy
     */
    public void setLastUpdatedBy(String value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Gets the attribute value for LastUpdatedDate, using the alias name LastUpdatedDate.
     * @return the value of LastUpdatedDate
     */
    public Timestamp getLastUpdatedDate() {
        return (Timestamp) getAttributeInternal(LASTUPDATEDDATE);
    }

    /**
     * @return the associated entity XpeDccContractVersionImpl.
     */
    public XpeDccContractVersionImpl getXpeDccContractVersion() {
        return (XpeDccContractVersionImpl) getAttributeInternal(XPEDCCCONTRACTVERSION);
    }

    /**
     * Sets <code>value</code> as the associated entity XpeDccContractVersionImpl.
     */
    public void setXpeDccContractVersion(XpeDccContractVersionImpl value) {
        setAttributeInternal(XPEDCCCONTRACTVERSION, value);
    }

    /**
     * @param xpeContractId key constituent
     * @param xpeContractVersion key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String xpeContractId, String xpeContractVersion) {
        return new Key(new Object[] { xpeContractId, xpeContractVersion });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.XpeDccContractNotes");
    }
    
    @Override
    protected void doDML(int i, TransactionEvent transactionEvent) {
        // TODO Implement this method
        String userName = "DB_ADMIN";
        ViewObjectImpl userInfoVO = (ViewObjectImpl)this.getDBTransaction().getRootApplicationModule().findViewObject("XpeDccUserInfoROVO");
        Row userInforVORow = userInfoVO.first();
        if(null!=userInforVORow)
            userName = (String)userInforVORow.getAttribute("USER_NAME");
        //INSERT
        if(i==this.DML_INSERT) 
            this.setCreatedBy(userName);
        //UPDATE
        if(i==this.DML_UPDATE) 
            this.setLastUpdatedBy(userName);
        
        super.doDML(i, transactionEvent);
    }
}

