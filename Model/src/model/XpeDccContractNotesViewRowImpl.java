package model;

import java.sql.Timestamp;

import oracle.jbo.domain.ClobDomain;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Sep 04 22:09:44 EDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XpeDccContractNotesViewRowImpl extends ViewRowImpl {
    public static final int ENTITY_XPEDCCCONTRACTNOTES = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        XpeContractId,
        XpeContractVersion,
        XpeNoteDttm,
        XpeNote,
        XpeUser,
        XpeNoteLong,
        XpeNoteType;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int XPECONTRACTID = AttributesEnum.XpeContractId.index();
    public static final int XPECONTRACTVERSION = AttributesEnum.XpeContractVersion.index();
    public static final int XPENOTEDTTM = AttributesEnum.XpeNoteDttm.index();
    public static final int XPENOTE = AttributesEnum.XpeNote.index();
    public static final int XPEUSER = AttributesEnum.XpeUser.index();
    public static final int XPENOTELONG = AttributesEnum.XpeNoteLong.index();
    public static final int XPENOTETYPE = AttributesEnum.XpeNoteType.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XpeDccContractNotesViewRowImpl() {
    }

    /**
     * Gets XpeDccContractNotes entity object.
     * @return the XpeDccContractNotes
     */
    public EntityImpl getXpeDccContractNotes() {
        return (EntityImpl) getEntity(ENTITY_XPEDCCCONTRACTNOTES);
    }

    /**
     * Gets the attribute value for XPE_CONTRACT_ID using the alias name XpeContractId.
     * @return the XPE_CONTRACT_ID
     */
    public String getXpeContractId() {
        return (String) getAttributeInternal(XPECONTRACTID);
    }

    /**
     * Sets <code>value</code> as attribute value for XPE_CONTRACT_ID using the alias name XpeContractId.
     * @param value value to set the XPE_CONTRACT_ID
     */
    public void setXpeContractId(String value) {
        setAttributeInternal(XPECONTRACTID, value);
    }

    /**
     * Gets the attribute value for XPE_CONTRACT_VERSION using the alias name XpeContractVersion.
     * @return the XPE_CONTRACT_VERSION
     */
    public String getXpeContractVersion() {
        return (String) getAttributeInternal(XPECONTRACTVERSION);
    }

    /**
     * Sets <code>value</code> as attribute value for XPE_CONTRACT_VERSION using the alias name XpeContractVersion.
     * @param value value to set the XPE_CONTRACT_VERSION
     */
    public void setXpeContractVersion(String value) {
        setAttributeInternal(XPECONTRACTVERSION, value);
    }

    /**
     * Gets the attribute value for XPE_NOTE_DTTM using the alias name XpeNoteDttm.
     * @return the XPE_NOTE_DTTM
     */
    public Timestamp getXpeNoteDttm() {
        return (Timestamp) getAttributeInternal(XPENOTEDTTM);
    }

    /**
     * Sets <code>value</code> as attribute value for XPE_NOTE_DTTM using the alias name XpeNoteDttm.
     * @param value value to set the XPE_NOTE_DTTM
     */
    public void setXpeNoteDttm(Timestamp value) {
        setAttributeInternal(XPENOTEDTTM, value);
    }

    /**
     * Gets the attribute value for XPE_NOTE using the alias name XpeNote.
     * @return the XPE_NOTE
     */
    public String getXpeNote() {
        return (String) getAttributeInternal(XPENOTE);
    }

    /**
     * Sets <code>value</code> as attribute value for XPE_NOTE using the alias name XpeNote.
     * @param value value to set the XPE_NOTE
     */
    public void setXpeNote(String value) {
        setAttributeInternal(XPENOTE, value);
    }

    /**
     * Gets the attribute value for XPE_USER using the alias name XpeUser.
     * @return the XPE_USER
     */
    public String getXpeUser() {
        return (String) getAttributeInternal(XPEUSER);
    }

    /**
     * Sets <code>value</code> as attribute value for XPE_USER using the alias name XpeUser.
     * @param value value to set the XPE_USER
     */
    public void setXpeUser(String value) {
        setAttributeInternal(XPEUSER, value);
    }

    /**
     * Gets the attribute value for XPE_NOTE_LONG using the alias name XpeNoteLong.
     * @return the XPE_NOTE_LONG
     */
    public ClobDomain getXpeNoteLong() {
        return (ClobDomain) getAttributeInternal(XPENOTELONG);
    }

    /**
     * Sets <code>value</code> as attribute value for XPE_NOTE_LONG using the alias name XpeNoteLong.
     * @param value value to set the XPE_NOTE_LONG
     */
    public void setXpeNoteLong(ClobDomain value) {
        setAttributeInternal(XPENOTELONG, value);
    }

    /**
     * Gets the attribute value for XPE_NOTE_TYPE using the alias name XpeNoteType.
     * @return the XPE_NOTE_TYPE
     */
    public String getXpeNoteType() {
        return (String) getAttributeInternal(XPENOTETYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for XPE_NOTE_TYPE using the alias name XpeNoteType.
     * @param value value to set the XPE_NOTE_TYPE
     */
    public void setXpeNoteType(String value) {
        setAttributeInternal(XPENOTETYPE, value);
    }
}

