package model;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.jbo.RowSet;
import oracle.jbo.domain.Char;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Oct 20 11:39:05 EDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XpeDccContractPricingOverViewRowImpl extends ViewRowImpl {


    public static final int ENTITY_XPEDCCCONTRACTPRICINGOVER = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        XpeContractId,
        XpeContractLine,
        XpeContractVersion,
        XpeContractOverNbr,
        XpeOverType,
        XpeOverStart,
        XpeOverEnd,
        XpeSourceFld,
        XpeCondition,
        XpeCheck,
        XpeTargetFld,
        XpeOverMsg,
        XpeOverDesc,
        CarryForwardedPricingOver,
        XpeDccDicOverrideType1,
        XpeDccDicFields1,
        XpeDccDicConditions1;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int XPECONTRACTID = AttributesEnum.XpeContractId.index();
    public static final int XPECONTRACTLINE = AttributesEnum.XpeContractLine.index();
    public static final int XPECONTRACTVERSION = AttributesEnum.XpeContractVersion.index();
    public static final int XPECONTRACTOVERNBR = AttributesEnum.XpeContractOverNbr.index();
    public static final int XPEOVERTYPE = AttributesEnum.XpeOverType.index();
    public static final int XPEOVERSTART = AttributesEnum.XpeOverStart.index();
    public static final int XPEOVEREND = AttributesEnum.XpeOverEnd.index();
    public static final int XPESOURCEFLD = AttributesEnum.XpeSourceFld.index();
    public static final int XPECONDITION = AttributesEnum.XpeCondition.index();
    public static final int XPECHECK = AttributesEnum.XpeCheck.index();
    public static final int XPETARGETFLD = AttributesEnum.XpeTargetFld.index();
    public static final int XPEOVERMSG = AttributesEnum.XpeOverMsg.index();
    public static final int XPEOVERDESC = AttributesEnum.XpeOverDesc.index();
    public static final int CARRYFORWARDEDPRICINGOVER = AttributesEnum.CarryForwardedPricingOver.index();
    public static final int XPEDCCDICOVERRIDETYPE1 = AttributesEnum.XpeDccDicOverrideType1.index();
    public static final int XPEDCCDICFIELDS1 = AttributesEnum.XpeDccDicFields1.index();
    public static final int XPEDCCDICCONDITIONS1 = AttributesEnum.XpeDccDicConditions1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XpeDccContractPricingOverViewRowImpl() {
    }

    /**
     * Gets XpeDccContractPricingOver entity object.
     * @return the XpeDccContractPricingOver
     */
    public EntityImpl getXpeDccContractPricingOver() {
        return (EntityImpl) getEntity(ENTITY_XPEDCCCONTRACTPRICINGOVER);
    }

    /**
     * Gets the attribute value for XPE_CONTRACT_ID using the alias name XpeContractId.
     * @return the XPE_CONTRACT_ID
     */
    public String getXpeContractId() {
        return (String) getAttributeInternal(XPECONTRACTID);
    }

    /**
     * Sets <code>value</code> as attribute value for XPE_CONTRACT_ID using the alias name XpeContractId.
     * @param value value to set the XPE_CONTRACT_ID
     */
    public void setXpeContractId(String value) {
        setAttributeInternal(XPECONTRACTID, value);
    }

    /**
     * Gets the attribute value for XPE_CONTRACT_LINE using the alias name XpeContractLine.
     * @return the XPE_CONTRACT_LINE
     */
    public String getXpeContractLine() {
        return (String) getAttributeInternal(XPECONTRACTLINE);
    }

    /**
     * Sets <code>value</code> as attribute value for XPE_CONTRACT_LINE using the alias name XpeContractLine.
     * @param value value to set the XPE_CONTRACT_LINE
     */
    public void setXpeContractLine(String value) {
        setAttributeInternal(XPECONTRACTLINE, value);
    }

    /**
     * Gets the attribute value for XPE_CONTRACT_VERSION using the alias name XpeContractVersion.
     * @return the XPE_CONTRACT_VERSION
     */
    public String getXpeContractVersion() {
        return (String) getAttributeInternal(XPECONTRACTVERSION);
    }

    /**
     * Sets <code>value</code> as attribute value for XPE_CONTRACT_VERSION using the alias name XpeContractVersion.
     * @param value value to set the XPE_CONTRACT_VERSION
     */
    public void setXpeContractVersion(String value) {
        setAttributeInternal(XPECONTRACTVERSION, value);
    }

    /**
     * Gets the attribute value for XPE_CONTRACT_OVER_NBR using the alias name XpeContractOverNbr.
     * @return the XPE_CONTRACT_OVER_NBR
     */
    public BigDecimal getXpeContractOverNbr() {
        return (BigDecimal) getAttributeInternal(XPECONTRACTOVERNBR);
    }

    /**
     * Sets <code>value</code> as attribute value for XPE_CONTRACT_OVER_NBR using the alias name XpeContractOverNbr.
     * @param value value to set the XPE_CONTRACT_OVER_NBR
     */
    public void setXpeContractOverNbr(BigDecimal value) {
        setAttributeInternal(XPECONTRACTOVERNBR, value);
    }

    /**
     * Gets the attribute value for XPE_OVER_TYPE using the alias name XpeOverType.
     * @return the XPE_OVER_TYPE
     */
    public String getXpeOverType() {
        return (String) getAttributeInternal(XPEOVERTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for XPE_OVER_TYPE using the alias name XpeOverType.
     * @param value value to set the XPE_OVER_TYPE
     */
    public void setXpeOverType(String value) {
        setAttributeInternal(XPEOVERTYPE, value);
    }

    /**
     * Gets the attribute value for XPE_OVER_START using the alias name XpeOverStart.
     * @return the XPE_OVER_START
     */
    public Timestamp getXpeOverStart() {
        return (Timestamp) getAttributeInternal(XPEOVERSTART);
    }

    /**
     * Sets <code>value</code> as attribute value for XPE_OVER_START using the alias name XpeOverStart.
     * @param value value to set the XPE_OVER_START
     */
    public void setXpeOverStart(Timestamp value) {
        setAttributeInternal(XPEOVERSTART, value);
    }

    /**
     * Gets the attribute value for XPE_OVER_END using the alias name XpeOverEnd.
     * @return the XPE_OVER_END
     */
    public Timestamp getXpeOverEnd() {
        return (Timestamp) getAttributeInternal(XPEOVEREND);
    }

    /**
     * Sets <code>value</code> as attribute value for XPE_OVER_END using the alias name XpeOverEnd.
     * @param value value to set the XPE_OVER_END
     */
    public void setXpeOverEnd(Timestamp value) {
        setAttributeInternal(XPEOVEREND, value);
    }

    /**
     * Gets the attribute value for XPE_SOURCE_FLD using the alias name XpeSourceFld.
     * @return the XPE_SOURCE_FLD
     */
    public String getXpeSourceFld() {
        return (String) getAttributeInternal(XPESOURCEFLD);
    }

    /**
     * Sets <code>value</code> as attribute value for XPE_SOURCE_FLD using the alias name XpeSourceFld.
     * @param value value to set the XPE_SOURCE_FLD
     */
    public void setXpeSourceFld(String value) {
        setAttributeInternal(XPESOURCEFLD, value);
    }

    /**
     * Gets the attribute value for XPE_CONDITION using the alias name XpeCondition.
     * @return the XPE_CONDITION
     */
    public String getXpeCondition() {
        return (String) getAttributeInternal(XPECONDITION);
    }

    /**
     * Sets <code>value</code> as attribute value for XPE_CONDITION using the alias name XpeCondition.
     * @param value value to set the XPE_CONDITION
     */
    public void setXpeCondition(String value) {
        setAttributeInternal(XPECONDITION, value);
    }

    /**
     * Gets the attribute value for XPE_CHECK using the alias name XpeCheck.
     * @return the XPE_CHECK
     */
    public String getXpeCheck() {
        return (String) getAttributeInternal(XPECHECK);
    }

    /**
     * Sets <code>value</code> as attribute value for XPE_CHECK using the alias name XpeCheck.
     * @param value value to set the XPE_CHECK
     */
    public void setXpeCheck(String value) {
        setAttributeInternal(XPECHECK, value);
    }

    /**
     * Gets the attribute value for XPE_TARGET_FLD using the alias name XpeTargetFld.
     * @return the XPE_TARGET_FLD
     */
    public String getXpeTargetFld() {
        return (String) getAttributeInternal(XPETARGETFLD);
    }

    /**
     * Sets <code>value</code> as attribute value for XPE_TARGET_FLD using the alias name XpeTargetFld.
     * @param value value to set the XPE_TARGET_FLD
     */
    public void setXpeTargetFld(String value) {
        setAttributeInternal(XPETARGETFLD, value);
    }

    /**
     * Gets the attribute value for XPE_OVER_MSG using the alias name XpeOverMsg.
     * @return the XPE_OVER_MSG
     */
    public String getXpeOverMsg() {
        return (String) getAttributeInternal(XPEOVERMSG);
    }

    /**
     * Sets <code>value</code> as attribute value for XPE_OVER_MSG using the alias name XpeOverMsg.
     * @param value value to set the XPE_OVER_MSG
     */
    public void setXpeOverMsg(String value) {
        setAttributeInternal(XPEOVERMSG, value);
    }

    /**
     * Gets the attribute value for XPE_OVER_DESC using the alias name XpeOverDesc.
     * @return the XPE_OVER_DESC
     */
    public String getXpeOverDesc() {
        return (String) getAttributeInternal(XPEOVERDESC);
    }

    /**
     * Sets <code>value</code> as attribute value for XPE_OVER_DESC using the alias name XpeOverDesc.
     * @param value value to set the XPE_OVER_DESC
     */
    public void setXpeOverDesc(String value) {
        setAttributeInternal(XPEOVERDESC, value);
    }


    /**
     * Gets the attribute value for the calculated attribute CarryForwardedPricingOver.
     * @return the CarryForwardedPricingOver
     */
    public String getCarryForwardedPricingOver() {
        return (String) getAttributeInternal(CARRYFORWARDEDPRICINGOVER);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CarryForwardedPricingOver.
     * @param value value to set the  CarryForwardedPricingOver
     */
    public void setCarryForwardedPricingOver(String value) {
        setAttributeInternal(CARRYFORWARDEDPRICINGOVER, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> XpeDccDicOverrideType1.
     */
    public RowSet getXpeDccDicOverrideType1() {
        return (RowSet) getAttributeInternal(XPEDCCDICOVERRIDETYPE1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> XpeDccDicFields1.
     */
    public RowSet getXpeDccDicFields1() {
        return (RowSet) getAttributeInternal(XPEDCCDICFIELDS1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> XpeDccDicConditions1.
     */
    public RowSet getXpeDccDicConditions1() {
        return (RowSet) getAttributeInternal(XPEDCCDICCONDITIONS1);
    }
}

