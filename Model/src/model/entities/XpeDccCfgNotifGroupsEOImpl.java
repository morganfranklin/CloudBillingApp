package model.entities;

import java.sql.Timestamp;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Apr 01 23:02:33 CDT 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XpeDccCfgNotifGroupsEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        GroupId,
        GroupType,
        NotificationId,
        Inactive,
        InactiveDate,
        CreatedBy,
        CreationDate,
        LastUpdatedBy,
        LastUpdateDate,
        XpeDccCfgNotificationEO;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int GROUPID = AttributesEnum.GroupId.index();
    public static final int GROUPTYPE = AttributesEnum.GroupType.index();
    public static final int NOTIFICATIONID = AttributesEnum.NotificationId.index();
    public static final int INACTIVE = AttributesEnum.Inactive.index();
    public static final int INACTIVEDATE = AttributesEnum.InactiveDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDATE = AttributesEnum.LastUpdateDate.index();
    public static final int XPEDCCCFGNOTIFICATIONEO = AttributesEnum.XpeDccCfgNotificationEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XpeDccCfgNotifGroupsEOImpl() {
    }

    /**
     * Gets the attribute value for GroupId, using the alias name GroupId.
     * @return the value of GroupId
     */
    public String getGroupId() {
        return (String) getAttributeInternal(GROUPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for GroupId.
     * @param value value to set the GroupId
     */
    public void setGroupId(String value) {
        setAttributeInternal(GROUPID, value);
    }

    /**
     * Gets the attribute value for GroupType, using the alias name GroupType.
     * @return the value of GroupType
     */
    public String getGroupType() {
        return (String) getAttributeInternal(GROUPTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for GroupType.
     * @param value value to set the GroupType
     */
    public void setGroupType(String value) {
        setAttributeInternal(GROUPTYPE, value);
    }

    /**
     * Gets the attribute value for NotificationId, using the alias name NotificationId.
     * @return the value of NotificationId
     */
    public String getNotificationId() {
        return (String) getAttributeInternal(NOTIFICATIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for NotificationId.
     * @param value value to set the NotificationId
     */
    public void setNotificationId(String value) {
        setAttributeInternal(NOTIFICATIONID, value);
    }

    /**
     * Gets the attribute value for Inactive, using the alias name Inactive.
     * @return the value of Inactive
     */
    public String getInactive() {
        return (String) getAttributeInternal(INACTIVE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Inactive.
     * @param value value to set the Inactive
     */
    public void setInactive(String value) {
        setAttributeInternal(INACTIVE, value);
    }

    /**
     * Gets the attribute value for InactiveDate, using the alias name InactiveDate.
     * @return the value of InactiveDate
     */
    public Timestamp getInactiveDate() {
        return (Timestamp) getAttributeInternal(INACTIVEDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for InactiveDate.
     * @param value value to set the InactiveDate
     */
    public void setInactiveDate(Timestamp value) {
        setAttributeInternal(INACTIVEDATE, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public String getCreatedBy() {
        return (String) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreationDate, using the alias name CreationDate.
     * @return the value of CreationDate
     */
    public Timestamp getCreationDate() {
        return (Timestamp) getAttributeInternal(CREATIONDATE);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the value of LastUpdatedBy
     */
    public String getLastUpdatedBy() {
        return (String) getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedBy.
     * @param value value to set the LastUpdatedBy
     */
    public void setLastUpdatedBy(String value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**
     * Gets the attribute value for LastUpdateDate, using the alias name LastUpdateDate.
     * @return the value of LastUpdateDate
     */
    public Timestamp getLastUpdateDate() {
        return (Timestamp) getAttributeInternal(LASTUPDATEDATE);
    }

    /**
     * @return the associated entity XpeDccCfgNotificationEOImpl.
     */
    public XpeDccCfgNotificationEOImpl getXpeDccCfgNotificationEO() {
        return (XpeDccCfgNotificationEOImpl) getAttributeInternal(XPEDCCCFGNOTIFICATIONEO);
    }

    /**
     * Sets <code>value</code> as the associated entity XpeDccCfgNotificationEOImpl.
     */
    public void setXpeDccCfgNotificationEO(XpeDccCfgNotificationEOImpl value) {
        setAttributeInternal(XPEDCCCFGNOTIFICATIONEO, value);
    }

    /**
     * @param groupId key constituent
     * @param groupType key constituent
     * @param notificationId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String groupId, String groupType, String notificationId) {
        return new Key(new Object[] { groupId, groupType, notificationId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.entities.XpeDccCfgNotifGroupsEO");
    }

    @Override
    protected void doDML(int i, TransactionEvent transactionEvent) {
        // TODO Implement this method
        String userName = "DB_ADMIN";
        ViewObjectImpl userInfoVO = (ViewObjectImpl)this.getDBTransaction().getRootApplicationModule().findViewObject("XpeDccUserInfoROVO");
        Row userInforVORow = userInfoVO.first();
        if(null!=userInforVORow)
            userName = (String)userInforVORow.getAttribute("USER_NAME");
        //INSERT
        if(i==this.DML_INSERT){
            this.setCreatedBy(userName);
            this.setLastUpdatedBy(userName);
        }
        //UPDATE
        if(i==this.DML_UPDATE) 
            this.setLastUpdatedBy(userName);
        
        super.doDML(i, transactionEvent);
    }
}

