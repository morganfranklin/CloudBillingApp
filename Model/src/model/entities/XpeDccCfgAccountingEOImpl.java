package model.entities;

import java.sql.Timestamp;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 20 07:23:21 EDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XpeDccCfgAccountingEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        SiteId,
        AccountingClass,
        DealClass,
        MaterialCategory,
        ProductServiceId,
        ChargeId,
        StatAccount,
        EntryType,
        OperatingUnit,
        AccountId,
        CreatedBy,
        CreatedDate,
        LastUpdatedBy,
        LastUpdatedDate,
        Inactive,
        InactiveDate;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SITEID = AttributesEnum.SiteId.index();
    public static final int ACCOUNTINGCLASS = AttributesEnum.AccountingClass.index();
    public static final int DEALCLASS = AttributesEnum.DealClass.index();
    public static final int MATERIALCATEGORY = AttributesEnum.MaterialCategory.index();
    public static final int PRODUCTSERVICEID = AttributesEnum.ProductServiceId.index();
    public static final int CHARGEID = AttributesEnum.ChargeId.index();
    public static final int STATACCOUNT = AttributesEnum.StatAccount.index();
    public static final int ENTRYTYPE = AttributesEnum.EntryType.index();
    public static final int OPERATINGUNIT = AttributesEnum.OperatingUnit.index();
    public static final int ACCOUNTID = AttributesEnum.AccountId.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDDATE = AttributesEnum.LastUpdatedDate.index();
    public static final int INACTIVE = AttributesEnum.Inactive.index();
    public static final int INACTIVEDATE = AttributesEnum.InactiveDate.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XpeDccCfgAccountingEOImpl() {
    }

    /**
     * Gets the attribute value for SiteId, using the alias name SiteId.
     * @return the value of SiteId
     */
    public String getSiteId() {
        return (String) getAttributeInternal(SITEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SiteId.
     * @param value value to set the SiteId
     */
    public void setSiteId(String value) {
        setAttributeInternal(SITEID, value);
    }

    /**
     * Gets the attribute value for AccountingClass, using the alias name AccountingClass.
     * @return the value of AccountingClass
     */
    public String getAccountingClass() {
        return (String) getAttributeInternal(ACCOUNTINGCLASS);
    }

    /**
     * Sets <code>value</code> as the attribute value for AccountingClass.
     * @param value value to set the AccountingClass
     */
    public void setAccountingClass(String value) {
        setAttributeInternal(ACCOUNTINGCLASS, value);
    }

    /**
     * Gets the attribute value for DealClass, using the alias name DealClass.
     * @return the value of DealClass
     */
    public String getDealClass() {
        return (String) getAttributeInternal(DEALCLASS);
    }

    /**
     * Sets <code>value</code> as the attribute value for DealClass.
     * @param value value to set the DealClass
     */
    public void setDealClass(String value) {
        setAttributeInternal(DEALCLASS, value);
    }

    /**
     * Gets the attribute value for MaterialCategory, using the alias name MaterialCategory.
     * @return the value of MaterialCategory
     */
    public String getMaterialCategory() {
        return (String) getAttributeInternal(MATERIALCATEGORY);
    }

    /**
     * Sets <code>value</code> as the attribute value for MaterialCategory.
     * @param value value to set the MaterialCategory
     */
    public void setMaterialCategory(String value) {
        setAttributeInternal(MATERIALCATEGORY, value);
    }

    /**
     * Gets the attribute value for ProductServiceId, using the alias name ProductServiceId.
     * @return the value of ProductServiceId
     */
    public String getProductServiceId() {
        return (String) getAttributeInternal(PRODUCTSERVICEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProductServiceId.
     * @param value value to set the ProductServiceId
     */
    public void setProductServiceId(String value) {
        setAttributeInternal(PRODUCTSERVICEID, value);
    }

    /**
     * Gets the attribute value for ChargeId, using the alias name ChargeId.
     * @return the value of ChargeId
     */
    public String getChargeId() {
        return (String) getAttributeInternal(CHARGEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ChargeId.
     * @param value value to set the ChargeId
     */
    public void setChargeId(String value) {
        setAttributeInternal(CHARGEID, value);
    }

    /**
     * Gets the attribute value for StatAccount, using the alias name StatAccount.
     * @return the value of StatAccount
     */
    public String getStatAccount() {
        return (String) getAttributeInternal(STATACCOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for StatAccount.
     * @param value value to set the StatAccount
     */
    public void setStatAccount(String value) {
        setAttributeInternal(STATACCOUNT, value);
    }

    /**
     * Gets the attribute value for EntryType, using the alias name EntryType.
     * @return the value of EntryType
     */
    public String getEntryType() {
        return (String) getAttributeInternal(ENTRYTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for EntryType.
     * @param value value to set the EntryType
     */
    public void setEntryType(String value) {
        setAttributeInternal(ENTRYTYPE, value);
    }

    /**
     * Gets the attribute value for OperatingUnit, using the alias name OperatingUnit.
     * @return the value of OperatingUnit
     */
    public String getOperatingUnit() {
        return (String) getAttributeInternal(OPERATINGUNIT);
    }

    /**
     * Sets <code>value</code> as the attribute value for OperatingUnit.
     * @param value value to set the OperatingUnit
     */
    public void setOperatingUnit(String value) {
        setAttributeInternal(OPERATINGUNIT, value);
    }

    /**
     * Gets the attribute value for AccountId, using the alias name AccountId.
     * @return the value of AccountId
     */
    public String getAccountId() {
        return (String) getAttributeInternal(ACCOUNTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for AccountId.
     * @param value value to set the AccountId
     */
    public void setAccountId(String value) {
        setAttributeInternal(ACCOUNTID, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public String getCreatedBy() {
        return (String) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedDate.
     * @param value value to set the CreatedDate
     */
    public void setCreatedDate(Timestamp value) {
        setAttributeInternal(CREATEDDATE, value);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the value of LastUpdatedBy
     */
    public String getLastUpdatedBy() {
        return (String) getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedBy.
     * @param value value to set the LastUpdatedBy
     */
    public void setLastUpdatedBy(String value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**
     * Gets the attribute value for LastUpdatedDate, using the alias name LastUpdatedDate.
     * @return the value of LastUpdatedDate
     */
    public Timestamp getLastUpdatedDate() {
        return (Timestamp) getAttributeInternal(LASTUPDATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedDate.
     * @param value value to set the LastUpdatedDate
     */
    public void setLastUpdatedDate(Timestamp value) {
        setAttributeInternal(LASTUPDATEDDATE, value);
    }

    /**
     * Gets the attribute value for Inactive, using the alias name Inactive.
     * @return the value of Inactive
     */
    public String getInactive() {
        return (String) getAttributeInternal(INACTIVE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Inactive.
     * @param value value to set the Inactive
     */
    public void setInactive(String value) {
        setAttributeInternal(INACTIVE, value);
    }

    /**
     * Gets the attribute value for InactiveDate, using the alias name InactiveDate.
     * @return the value of InactiveDate
     */
    public Timestamp getInactiveDate() {
        return (Timestamp) getAttributeInternal(INACTIVEDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for InactiveDate.
     * @param value value to set the InactiveDate
     */
    public void setInactiveDate(Timestamp value) {
        setAttributeInternal(INACTIVEDATE, value);
    }

    /**
     * @param accountId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String accountId) {
        return new Key(new Object[] { accountId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.entities.XpeDccCfgAccountingEO");
    }


    protected String nextVal(String sequenceName) {
        SequenceImpl s = new SequenceImpl(sequenceName, getDBTransaction());
        return s.getSequenceNumber().toString();
    }
    
    @Override
    protected void doDML(int i, TransactionEvent transactionEvent) {
        // TODO Implement this method
        String userName = "DB_ADMIN";
        ViewObjectImpl userInfoVO = (ViewObjectImpl)this.getDBTransaction().getRootApplicationModule().findViewObject("XpeDccUserInfoROVO");
        Row userInforVORow = userInfoVO.first();
        if(null!=userInforVORow)
            userName = (String)userInforVORow.getAttribute("USER_NAME");
        //INSERT
        if(i==this.DML_INSERT){
            this.setCreatedBy(userName);
            this.setLastUpdatedBy(userName);
        }
        //UPDATE
        if(i==this.DML_UPDATE) 
            this.setLastUpdatedBy(userName);
        
        super.doDML(i, transactionEvent);
    }
}

