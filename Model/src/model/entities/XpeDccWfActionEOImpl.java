package model.entities;

import java.sql.Timestamp;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 18 17:37:57 EDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XpeDccWfActionEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        XpeContractId,
        XpeContractVersion,
        XpeEventNumber,
        XpeApproverSequence,
        XpeUuid,
        XpeApproverEmail,
        XpeActionStatus,
        CreatedBy,
        CreatedDate,
        LastUpdatedBy,
        LastUpdatedDate,
        XpeApproverLevel,
        XpeDccWfEventEO;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int XPECONTRACTID = AttributesEnum.XpeContractId.index();
    public static final int XPECONTRACTVERSION = AttributesEnum.XpeContractVersion.index();
    public static final int XPEEVENTNUMBER = AttributesEnum.XpeEventNumber.index();
    public static final int XPEAPPROVERSEQUENCE = AttributesEnum.XpeApproverSequence.index();
    public static final int XPEUUID = AttributesEnum.XpeUuid.index();
    public static final int XPEAPPROVEREMAIL = AttributesEnum.XpeApproverEmail.index();
    public static final int XPEACTIONSTATUS = AttributesEnum.XpeActionStatus.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATEDDATE = AttributesEnum.CreatedDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDDATE = AttributesEnum.LastUpdatedDate.index();
    public static final int XPEAPPROVERLEVEL = AttributesEnum.XpeApproverLevel.index();
    public static final int XPEDCCWFEVENTEO = AttributesEnum.XpeDccWfEventEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XpeDccWfActionEOImpl() {
    }

    /**
     * Gets the attribute value for XpeContractId, using the alias name XpeContractId.
     * @return the value of XpeContractId
     */
    public String getXpeContractId() {
        return (String) getAttributeInternal(XPECONTRACTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for XpeContractId.
     * @param value value to set the XpeContractId
     */
    public void setXpeContractId(String value) {
        setAttributeInternal(XPECONTRACTID, value);
    }

    /**
     * Gets the attribute value for XpeContractVersion, using the alias name XpeContractVersion.
     * @return the value of XpeContractVersion
     */
    public String getXpeContractVersion() {
        return (String) getAttributeInternal(XPECONTRACTVERSION);
    }

    /**
     * Sets <code>value</code> as the attribute value for XpeContractVersion.
     * @param value value to set the XpeContractVersion
     */
    public void setXpeContractVersion(String value) {
        setAttributeInternal(XPECONTRACTVERSION, value);
    }

    /**
     * Gets the attribute value for XpeEventNumber, using the alias name XpeEventNumber.
     * @return the value of XpeEventNumber
     */
    public String getXpeEventNumber() {
        return (String) getAttributeInternal(XPEEVENTNUMBER);
    }

    /**
     * Sets <code>value</code> as the attribute value for XpeEventNumber.
     * @param value value to set the XpeEventNumber
     */
    public void setXpeEventNumber(String value) {
        setAttributeInternal(XPEEVENTNUMBER, value);
    }

    /**
     * Gets the attribute value for XpeApproverSequence, using the alias name XpeApproverSequence.
     * @return the value of XpeApproverSequence
     */
    public String getXpeApproverSequence() {
        return (String) getAttributeInternal(XPEAPPROVERSEQUENCE);
    }

    /**
     * Sets <code>value</code> as the attribute value for XpeApproverSequence.
     * @param value value to set the XpeApproverSequence
     */
    public void setXpeApproverSequence(String value) {
        setAttributeInternal(XPEAPPROVERSEQUENCE, value);
    }

    /**
     * Gets the attribute value for XpeUuid, using the alias name XpeUuid.
     * @return the value of XpeUuid
     */
    public String getXpeUuid() {
        return (String) getAttributeInternal(XPEUUID);
    }

    /**
     * Sets <code>value</code> as the attribute value for XpeUuid.
     * @param value value to set the XpeUuid
     */
    public void setXpeUuid(String value) {
        setAttributeInternal(XPEUUID, value);
    }

    /**
     * Gets the attribute value for XpeApproverEmail, using the alias name XpeApproverEmail.
     * @return the value of XpeApproverEmail
     */
    public String getXpeApproverEmail() {
        return (String) getAttributeInternal(XPEAPPROVEREMAIL);
    }

    /**
     * Sets <code>value</code> as the attribute value for XpeApproverEmail.
     * @param value value to set the XpeApproverEmail
     */
    public void setXpeApproverEmail(String value) {
        setAttributeInternal(XPEAPPROVEREMAIL, value);
    }

    /**
     * Gets the attribute value for XpeActionStatus, using the alias name XpeActionStatus.
     * @return the value of XpeActionStatus
     */
    public String getXpeActionStatus() {
        return (String) getAttributeInternal(XPEACTIONSTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for XpeActionStatus.
     * @param value value to set the XpeActionStatus
     */
    public void setXpeActionStatus(String value) {
        setAttributeInternal(XPEACTIONSTATUS, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public String getCreatedBy() {
        return (String) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreatedDate, using the alias name CreatedDate.
     * @return the value of CreatedDate
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the value of LastUpdatedBy
     */
    public String getLastUpdatedBy() {
        return (String) getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedBy.
     * @param value value to set the LastUpdatedBy
     */
    public void setLastUpdatedBy(String value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**
     * Gets the attribute value for LastUpdatedDate, using the alias name LastUpdatedDate.
     * @return the value of LastUpdatedDate
     */
    public Timestamp getLastUpdatedDate() {
        return (Timestamp) getAttributeInternal(LASTUPDATEDDATE);
    }

    /**
     * Gets the attribute value for XpeApproverLevel, using the alias name XpeApproverLevel.
     * @return the value of XpeApproverLevel
     */
    public String getXpeApproverLevel() {
        return (String) getAttributeInternal(XPEAPPROVERLEVEL);
    }

    /**
     * Sets <code>value</code> as the attribute value for XpeApproverLevel.
     * @param value value to set the XpeApproverLevel
     */
    public void setXpeApproverLevel(String value) {
        setAttributeInternal(XPEAPPROVERLEVEL, value);
    }

    /**
     * @return the associated entity XpeDccWfEventEOImpl.
     */
    public XpeDccWfEventEOImpl getXpeDccWfEventEO() {
        return (XpeDccWfEventEOImpl) getAttributeInternal(XPEDCCWFEVENTEO);
    }

    /**
     * Sets <code>value</code> as the associated entity XpeDccWfEventEOImpl.
     */
    public void setXpeDccWfEventEO(XpeDccWfEventEOImpl value) {
        setAttributeInternal(XPEDCCWFEVENTEO, value);
    }

    /**
     * @param xpeApproverSequence key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String xpeApproverSequence) {
        return new Key(new Object[] { xpeApproverSequence });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.entities.XpeDccWfActionEO");
    }


    protected String nextVal(String sequenceName) {
        SequenceImpl s = new SequenceImpl(sequenceName, getDBTransaction());
        return s.getSequenceNumber().toString();
    }
    
    @Override
    protected void doDML(int i, TransactionEvent transactionEvent) {
        // TODO Implement this method
        String userName = "DB_ADMIN";
        ViewObjectImpl userInfoVO = (ViewObjectImpl)this.getDBTransaction().getRootApplicationModule().findViewObject("XpeDccUserInfoROVO");
        Row userInforVORow = userInfoVO.first();
        if(null!=userInforVORow)
            userName = (String)userInforVORow.getAttribute("USER_NAME");
        //INSERT
        if(i==this.DML_INSERT){
            this.setCreatedBy(userName);
            this.setLastUpdatedBy(userName);
        }
        //UPDATE
        if(i==this.DML_UPDATE) 
            this.setLastUpdatedBy(userName);
        
        super.doDML(i, transactionEvent);
    }
}

